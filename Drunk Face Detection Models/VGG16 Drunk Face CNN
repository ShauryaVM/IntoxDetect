{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"08TDsycE-xHT","executionInfo":{"status":"ok","timestamp":1719458901899,"user_tz":240,"elapsed":1714873,"user":{"displayName":"Idhant Gode","userId":"14027119196205914130"}},"outputId":"b5ea0dd6-9f1e-4bf3-bce5-6904a0143bb7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:absl:`lr` is deprecated in Keras optimizer, please use `learning_rate` or use the legacy optimizer, e.g.,tf.keras.optimizers.legacy.Adam.\n"]},{"output_type":"stream","name":"stdout","text":["Model: \"model_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_2 (InputLayer)        [(None, 224, 224, 3)]     0         \n","                                                                 \n"," block1_conv1 (Conv2D)       (None, 224, 224, 64)      1792      \n","                                                                 \n"," block1_conv2 (Conv2D)       (None, 224, 224, 64)      36928     \n","                                                                 \n"," block1_pool (MaxPooling2D)  (None, 112, 112, 64)      0         \n","                                                                 \n"," block2_conv1 (Conv2D)       (None, 112, 112, 128)     73856     \n","                                                                 \n"," block2_conv2 (Conv2D)       (None, 112, 112, 128)     147584    \n","                                                                 \n"," block2_pool (MaxPooling2D)  (None, 56, 56, 128)       0         \n","                                                                 \n"," block3_conv1 (Conv2D)       (None, 56, 56, 256)       295168    \n","                                                                 \n"," block3_conv2 (Conv2D)       (None, 56, 56, 256)       590080    \n","                                                                 \n"," block3_conv3 (Conv2D)       (None, 56, 56, 256)       590080    \n","                                                                 \n"," block3_pool (MaxPooling2D)  (None, 28, 28, 256)       0         \n","                                                                 \n"," block4_conv1 (Conv2D)       (None, 28, 28, 512)       1180160   \n","                                                                 \n"," block4_conv2 (Conv2D)       (None, 28, 28, 512)       2359808   \n","                                                                 \n"," block4_conv3 (Conv2D)       (None, 28, 28, 512)       2359808   \n","                                                                 \n"," block4_pool (MaxPooling2D)  (None, 14, 14, 512)       0         \n","                                                                 \n"," block5_conv1 (Conv2D)       (None, 14, 14, 512)       2359808   \n","                                                                 \n"," block5_conv2 (Conv2D)       (None, 14, 14, 512)       2359808   \n","                                                                 \n"," block5_conv3 (Conv2D)       (None, 14, 14, 512)       2359808   \n","                                                                 \n"," block5_pool (MaxPooling2D)  (None, 7, 7, 512)         0         \n","                                                                 \n"," flatten_1 (Flatten)         (None, 25088)             0         \n","                                                                 \n"," dense_2 (Dense)             (None, 512)               12845568  \n","                                                                 \n"," dropout_1 (Dropout)         (None, 512)               0         \n","                                                                 \n"," dense_3 (Dense)             (None, 1)                 513       \n","                                                                 \n","=================================================================\n","Total params: 27560769 (105.14 MB)\n","Trainable params: 12846081 (49.00 MB)\n","Non-trainable params: 14714688 (56.13 MB)\n","_________________________________________________________________\n","Epoch 1/30\n","221/221 [==============================] - 82s 366ms/step - loss: 0.7927 - accuracy: 0.6153 - val_loss: 0.5912 - val_accuracy: 0.7169\n","Epoch 2/30\n","221/221 [==============================] - 81s 367ms/step - loss: 0.6263 - accuracy: 0.6472 - val_loss: 0.5672 - val_accuracy: 0.7143\n","Epoch 3/30\n","221/221 [==============================] - 82s 372ms/step - loss: 0.6083 - accuracy: 0.6665 - val_loss: 0.5704 - val_accuracy: 0.7520\n","Epoch 4/30\n","221/221 [==============================] - 82s 369ms/step - loss: 0.5940 - accuracy: 0.6750 - val_loss: 0.5243 - val_accuracy: 0.7401\n","Epoch 5/30\n","221/221 [==============================] - 79s 358ms/step - loss: 0.5785 - accuracy: 0.6896 - val_loss: 0.5072 - val_accuracy: 0.7328\n","Epoch 6/30\n","221/221 [==============================] - 78s 354ms/step - loss: 0.5839 - accuracy: 0.6896 - val_loss: 0.5147 - val_accuracy: 0.7474\n","Epoch 7/30\n","221/221 [==============================] - 77s 350ms/step - loss: 0.5839 - accuracy: 0.6843 - val_loss: 0.5632 - val_accuracy: 0.7103\n","Epoch 8/30\n","221/221 [==============================] - 78s 351ms/step - loss: 0.5624 - accuracy: 0.7104 - val_loss: 0.4779 - val_accuracy: 0.7533\n","Epoch 9/30\n","221/221 [==============================] - 78s 353ms/step - loss: 0.5460 - accuracy: 0.7175 - val_loss: 0.5102 - val_accuracy: 0.7626\n","Epoch 10/30\n","221/221 [==============================] - 77s 346ms/step - loss: 0.5653 - accuracy: 0.7110 - val_loss: 0.4926 - val_accuracy: 0.7817\n","Epoch 11/30\n","221/221 [==============================] - 76s 346ms/step - loss: 0.5555 - accuracy: 0.7133 - val_loss: 0.4611 - val_accuracy: 0.7824\n","Epoch 12/30\n","221/221 [==============================] - 77s 347ms/step - loss: 0.5439 - accuracy: 0.7263 - val_loss: 0.4456 - val_accuracy: 0.8022\n","Epoch 13/30\n","221/221 [==============================] - 77s 347ms/step - loss: 0.5331 - accuracy: 0.7206 - val_loss: 0.4264 - val_accuracy: 0.7937\n","Epoch 14/30\n","221/221 [==============================] - 77s 348ms/step - loss: 0.5227 - accuracy: 0.7321 - val_loss: 0.4466 - val_accuracy: 0.7731\n","Epoch 15/30\n","221/221 [==============================] - 75s 340ms/step - loss: 0.5214 - accuracy: 0.7393 - val_loss: 0.4434 - val_accuracy: 0.7963\n","Epoch 16/30\n","221/221 [==============================] - 76s 342ms/step - loss: 0.5232 - accuracy: 0.7439 - val_loss: 0.4052 - val_accuracy: 0.8175\n","Epoch 17/30\n","221/221 [==============================] - 75s 339ms/step - loss: 0.5047 - accuracy: 0.7437 - val_loss: 0.3974 - val_accuracy: 0.8234\n","Epoch 18/30\n","221/221 [==============================] - 75s 339ms/step - loss: 0.5067 - accuracy: 0.7493 - val_loss: 0.4008 - val_accuracy: 0.8148\n","Epoch 19/30\n","221/221 [==============================] - 75s 339ms/step - loss: 0.4932 - accuracy: 0.7532 - val_loss: 0.3987 - val_accuracy: 0.8247\n","Epoch 20/30\n","221/221 [==============================] - 75s 340ms/step - loss: 0.4966 - accuracy: 0.7528 - val_loss: 0.4010 - val_accuracy: 0.8122\n","48/48 [==============================] - 6s 120ms/step - loss: 0.4088 - accuracy: 0.8188\n","Test accuracy: 0.8187830448150635\n"]}],"source":["import numpy as np\n","import tensorflow as tf\n","import os\n","import cv2\n","from tensorflow.keras.applications import VGG16\n","from tensorflow.keras import layers, Model\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.optimizers import Adam\n","from sklearn.model_selection import train_test_split\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","# Directories\n","drunk_dir = '/content/drive/MyDrive/NeurIPS/Code/cropped/drunk'\n","sober_dir = '/content/drive/MyDrive/NeurIPS/Code/cropped/sober'\n","\n","# Load images and labels\n","def load_images_from_folder(folder, label):\n","    images = []\n","    labels = []\n","    for filename in os.listdir(folder):\n","        img = cv2.imread(os.path.join(folder, filename))\n","        if img is not None:\n","            img = cv2.resize(img, (224, 224))\n","            images.append(img)\n","            labels.append(label)\n","    return images, labels\n","\n","drunk_images, drunk_labels = load_images_from_folder(drunk_dir, 1)  # Label 1 for drunk\n","sober_images, sober_labels = load_images_from_folder(sober_dir, 0)  # Label 0 for sober\n","\n","# Combine and split the dataset\n","images = np.array(drunk_images + sober_images)\n","labels = np.array(drunk_labels + sober_labels)\n","\n","# Normalize images\n","images = images.astype('float32')\n","images /= 255.0\n","\n","# Split the dataset\n","train_x, temp_x, train_y, temp_y = train_test_split(images, labels, test_size=0.3, random_state=42)\n","val_x, test_x, val_y, test_y = train_test_split(temp_x, temp_y, test_size=0.5, random_state=42)\n","\n","# Data generators\n","train_datagen = ImageDataGenerator(rotation_range=40, width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)\n","val_datagen = ImageDataGenerator()\n","test_datagen = ImageDataGenerator()\n","\n","train_generator = train_datagen.flow(train_x, train_y, batch_size=32)\n","val_generator = val_datagen.flow(val_x, val_y, batch_size=32)\n","test_generator = test_datagen.flow(test_x, test_y, batch_size=32)\n","\n","# Load VGG16 model\n","base_model = VGG16(input_shape=(224, 224, 3), include_top=False, weights='imagenet')\n","\n","# Freeze the base_model\n","for layer in base_model.layers:\n","    layer.trainable = False\n","\n","# Add custom layers\n","x = layers.Flatten()(base_model.output)\n","x = layers.Dense(512, activation='relu')(x)\n","x = layers.Dropout(0.5)(x)\n","x = layers.Dense(1, activation='sigmoid')(x)  # Binary classification (drunk or sober)\n","\n","model = Model(inputs=base_model.input, outputs=x)\n","\n","# Compile the model\n","model.compile(optimizer=Adam(lr=0.001), loss='binary_crossentropy', metrics=['accuracy'])\n","model.summary()\n","\n","# Train the model\n","early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)\n","\n","history = model.fit(train_generator, epochs=30, validation_data=val_generator, callbacks=[early_stopping])\n","\n","# Evaluate the model\n","test_loss, test_acc = model.evaluate(test_generator)\n","print(f'Test accuracy: {test_acc}')\n"]},{"cell_type":"code","source":[],"metadata":{"id":"thJJ5RxROlCo"},"execution_count":null,"outputs":[]}]}